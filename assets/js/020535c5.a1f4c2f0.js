"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[720],{2479:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"api/uploads","title":"Uploads","description":"Wrapper for tus-js-client","source":"@site/docs/api/uploads.md","sourceDirName":"api","slug":"/api/uploads","permalink":"/sdk-js/api/uploads","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/api/uploads.md","tags":[],"version":"current","frontMatter":{"title":"Uploads"},"sidebar":"someSidebar","previous":{"title":"Downloads","permalink":"/sdk-js/api/downloads"},"next":{"title":"Creating a Proxy","permalink":"/sdk-js/recipes/proxy"}}');var r=s(4848),a=s(8453);const d={title:"Uploads"},i=void 0,t={},o=[{value:"Install",id:"install",level:2},{value:"NPM",id:"npm",level:3},{value:"Yarn",id:"yarn",level:3},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Required params",id:"required-params",level:4},{value:"Optional params",id:"optional-params",level:4},{value:"Upload event handlers",id:"upload-event-handlers",level:4},{value:"Advanced Usage Examples",id:"advanced-usage-examples",level:3},{value:"File Type Restrictions",id:"file-type-restrictions",level:4},{value:"Custom Metadata",id:"custom-metadata",level:4},{value:"Handling Encrypted Files",id:"handling-encrypted-files",level:4},{value:"Progress Tracking",id:"progress-tracking",level:4},{value:"Pre-start Validation",id:"pre-start-validation",level:4},{value:"Upload Status Values",id:"upload-status-values",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Aborting an Upload",id:"aborting-an-upload",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Wrapper for tus-js-client"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@availity/upload-core",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/npm/v/@availity/upload-core.svg?style=for-the-badge",alt:"Version"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@availity/upload-core"})," is a powerful wrapper for the ",(0,r.jsx)(n.code,{children:"tus-js-client"})," library, providing a high-level API for managing file uploads using the tus protocol. This package simplifies the process of initiating, monitoring, and handling file uploads in JavaScript applications. Key features include:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Easy-to-use Upload class for managing file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Progress tracking and real-time status updates"}),"\n",(0,r.jsx)(n.li,{children:"Robust error handling and retry mechanisms"}),"\n",(0,r.jsx)(n.li,{children:"File validation (size, type, name)"}),"\n",(0,r.jsx)(n.li,{children:"Support for encrypted file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Customizable upload options and callbacks"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,r.jsx)(n.h3,{id:"npm",children:"NPM"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @availity/upload-core\n"})}),"\n",(0,r.jsx)(n.h3,{id:"yarn",children:"Yarn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @availity/upload-core\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import Upload from '@availity/upload-core';\n\nconst file = new File(['file content'], 'example.pdf', {\n  type: 'application/pdf',\n});\n\nconst upload = new Upload(file, {\n  bucketId: 'YOUR_BUCKET_ID',\n  customerId: 'YOUR_CUSTOMER_ID',\n  clientId: 'YOUR_CLIENT_ID',\n});\n\n// Add event listeners\nupload.onProgress.push(() => {\n  console.log(`Upload progress: ${upload.percentage}%`);\n});\n\nupload.onSuccess.push(() => {\n  console.log('Upload completed successfully!');\n  console.log('File references:', upload.references);\n  console.log('S3 references:', upload.s3References);\n});\n\nupload.onError.push((error) => {\n  console.error('Upload failed:', error.message);\n});\n\n// Generate unique ID and start upload\nawait upload.generateId();\nupload.start();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"required-params",children:"Required params"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"bucketId"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The target bucket"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"customerId"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The customer id of the organization"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"clientId"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The client id for api calls"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"optional-params",children:"Optional params"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fileTypes"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"Allowed file extensions (e.g., '.pdf', '.png')"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxSize"}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"Maximum file size in bytes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"metadata"}),(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"Additional metadata for the upload"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"allowedFileNameCharacters"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"Regex pattern for allowed filename characters"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"pollingTime"}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"5000"}),(0,r.jsx)(n.td,{children:"Interval for virus scan polling (ms)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"maxAvScanRetries"}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Maximum retries for virus scan check"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"stripFileNamePathSegments"}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"Remove path segments from filename"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"upload-event-handlers",children:"Upload event handlers"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Each one of these should be an array of functions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"onPreStart"}),": each function should return a boolean. If false, upload-core will not make xhr request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"onProgress"}),": occurs during initial and at various points of the Xhr call to backend."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"onSuccess"}),": each function is called once if there is a success."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"onError"}),": each function is called once if there is an error."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"advanced-usage-examples",children:"Advanced Usage Examples"}),"\n",(0,r.jsx)(n.h4,{id:"file-type-restrictions",children:"File Type Restrictions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n  fileTypes: ['.pdf', '.doc', '.docx'],\n  maxSize: 10 * 1024 * 1024, // 10MB\n  allowedFileNameCharacters: '_a-zA-Z0-9 ', // alphanumeric, spaces, underscore\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"custom-metadata",children:"Custom Metadata"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n  metadata: {\n    'document-type': 'medical-record',\n    'patient-id': '12345',\n    department: 'cardiology',\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"handling-encrypted-files",children:"Handling Encrypted Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n});\n\nupload.onError.push((error) => {\n  if (upload.status === 'encrypted') {\n    // Prompt user for password\n    const password = promptUserForPassword();\n    upload.sendPassword(password);\n  } else {\n    console.error('Upload failed:', error.message);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"progress-tracking",children:"Progress Tracking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n});\n\nupload.onProgress.push(() => {\n  const uploadedSize = upload.bytesSent;\n  const totalSize = upload.bytesTotal;\n  const scannedBytes = upload.bytesScanned;\n  const percentage = upload.percentage;\n\n  console.log(`Uploaded: ${uploadedSize}/${totalSize} bytes`);\n  console.log(`Scanned: ${scannedBytes} bytes`);\n  console.log(`Overall progress: ${percentage}%`);\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"pre-start-validation",children:"Pre-start Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n});\n\n// Add custom validation before upload starts\nupload.onPreStart.push((upload) => {\n  if (upload.file.size === 0) {\n    console.error('Cannot upload empty file');\n    return false;\n  }\n  return true;\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upload-status-values",children:"Upload Status Values"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"upload.status"})," can be one of the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pending"}),": Initial state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"accepted"}),": Upload completed successfully"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rejected"}),": Upload failed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encrypted"}),": File is encrypted and requires a password"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decrypting"}),": File is being decrypted"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n});\n\nupload.onError.push((error) => {\n  console.error('Status:', upload.status);\n  console.error('Error Message:', upload.errorMessage);\n  console.error('Error Details:', error);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"aborting-an-upload",children:"Aborting an Upload"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const upload = new Upload(file, {\n  bucketId: 'bucket123',\n  customerId: 'customer123',\n  clientId: 'client123',\n});\n\n// Later in your code\nupload.abort();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>i});var l=s(6540);const r={},a=l.createContext(r);function d(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);
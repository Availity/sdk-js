"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[338],{6345:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/axios-resources","title":"Axios Resources","description":"This page has information on pre-defined resources you can import into your app.","source":"@site/docs/api/axios-resources.md","sourceDirName":"api","slug":"/api/axios-resources","permalink":"/sdk-js/api/axios-resources","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/api/axios-resources.md","tags":[],"version":"current","frontMatter":{"title":"Axios Resources"},"sidebar":"someSidebar","previous":{"title":"Getting Started","permalink":"/sdk-js/api/getting-started"},"next":{"title":"Codes","permalink":"/sdk-js/api/definitions/codes"}}');var a=i(4848),r=i(8453);const o={title:"Axios Resources"},t=void 0,d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"AvUserApi",id:"avuserapi",level:3},{value:"<code>me(config)</code>",id:"meconfig",level:4},{value:"AvRegionsApi",id:"avregionsapi",level:3},{value:"<code>getRegions(config)</code>",id:"getregionsconfig",level:4},{value:"<code>getCurrentRegion()</code>",id:"getcurrentregion",level:4},{value:"AvPermissionsApi",id:"avpermissionsapi",level:3},{value:"<code>getPermissions(permissionId, region)</code>",id:"getpermissionspermissionid-region",level:4},{value:"AvUserPermissionsApi",id:"avuserpermissionsapi",level:3},{value:"<code>getPermissions(permissionId, region)</code>",id:"getpermissionspermissionid-region-1",level:4},{value:"AvSpacesApi",id:"avspacesapi",level:3},{value:"<code>parseSpaceId(query)</code>",id:"parsespaceidquery",level:4},{value:"<code>getSpaceName(spaceId)</code>",id:"getspacenamespaceid",level:4},{value:"AvOrganizationsApi",id:"avorganizationsapi",level:3},{value:"<code>queryOrganizations(user, config)</code>",id:"queryorganizationsuser-config",level:4},{value:"<code>getOrganizations(config)</code>",id:"getorganizationsconfig",level:4},{value:"<code>postGet(data, config, additionalPostGetArgs)</code>",id:"postgetdata-config-additionalpostgetargs",level:4},{value:"<code>getFilteredOrganizations(organizationsData, additionalPostGetArgs, restQueryParams)</code>",id:"getfilteredorganizationsorganizationsdata-additionalpostgetargs-restqueryparams",level:4},{value:"AvProvidersApi",id:"avprovidersapi",level:3},{value:"<code>getProviders(customerId, config)</code>",id:"getproviderscustomerid-config",level:4},{value:"<code>normalize(providers)</code>",id:"normalizeproviders",level:4},{value:"AvLogMessagesApi",id:"avlogmessagesapi",level:3},{value:"<code>send(level, entires)</code>",id:"sendlevel-entires",level:4},{value:"<code>debug(entries)</code>",id:"debugentries",level:4},{value:"<code>info(entries)</code>",id:"infoentries",level:4},{value:"<code>warn(entries)</code>",id:"warnentries",level:4},{value:"<code>error(entries)</code>",id:"errorentries",level:4},{value:"AvPdfApi",id:"avpdfapi",level:3},{value:"<code>onPdf(response)</code>",id:"onpdfresponse",level:4},{value:"AvFilesApi",id:"avfilesapi",level:3},{value:"<code>uploadFile(data, config)</code>",id:"uploadfiledata-config",level:4},{value:"AvFilesDelivery",id:"avfilesdelivery",level:3},{value:"<code>uploadFilesDelivery(data, config)</code>",id:"uploadfilesdeliverydata-config",level:4},{value:"Example Response",id:"example-response",level:4},{value:"<code>getLocation(response)</code>",id:"getlocationresponse",level:4},{value:"AvSettingsApi",id:"avsettingsapi",level:3},{value:"<code>getApplication(applicationdId, config)</code>",id:"getapplicationapplicationdid-config",level:4},{value:"<code>setApplication(applicationId, data, config)</code>",id:"setapplicationapplicationid-data-config",level:4},{value:"AvDisclaimersApi",id:"avdisclaimersapi",level:3},{value:"<code>getDisclaimers(id, config)</code>",id:"getdisclaimersid-config",level:4},{value:"AvSlotMachineApi",id:"avslotmachineapi",level:3},{value:"<code>query(query, variables)</code>",id:"queryquery-variables",level:4},{value:"AvTelemetryApi",id:"avtelemetryapi",level:3},{value:"<code>info(data)</code>",id:"infodata",level:4},{value:"<code>warn(data)</code>",id:"warndata",level:4},{value:"<code>error(data)</code>",id:"errordata",level:4},{value:"<code>debug(data)</code>",id:"debugdata",level:4},{value:"AvProxyApi",id:"avproxyapi",level:3},{value:"<code>X-Availity-Customer-ID</code> Header",id:"x-availity-customer-id-header",level:4},{value:"<code>create(data, config)</code>",id:"createdata-config",level:4},{value:"Params",id:"params",level:5},{value:"Example",id:"example",level:5},{value:"<code>delete(id, config)</code>",id:"deleteid-config",level:4},{value:"Params",id:"params-1",level:5},{value:"Example",id:"example-1",level:5},{value:"<code>get(id, config)</code>",id:"getid-config",level:4},{value:"Params",id:"params-2",level:5},{value:"Example",id:"example-2",level:5},{value:"<code>patch(id, data, config)</code>",id:"patchid-data-config",level:4},{value:"Params",id:"params-3",level:5},{value:"Example",id:"example-3",level:5},{value:"<code>post(data, config)</code>",id:"postdata-config",level:4},{value:"Params",id:"params-4",level:5},{value:"Example",id:"example-4",level:5},{value:"<code>postGet(id, config)</code>",id:"postgetid-config",level:4},{value:"Params",id:"params-5",level:5},{value:"Example",id:"example-5",level:5},{value:"<code>put(id, data, config)</code>",id:"putid-data-config",level:4},{value:"Params",id:"params-6",level:5},{value:"Example",id:"example-6",level:5},{value:"<code>onResponse(config, afterResponse)</code>",id:"onresponseconfig-afterresponse",level:4},{value:"Params",id:"params-7",level:5},{value:"Example",id:"example-7",level:5},{value:"<code>query(config)</code>",id:"queryconfig",level:4},{value:"Params",id:"params-8",level:5},{value:"Example",id:"example-8",level:5},{value:"<code>remove(id, config)</code>",id:"removeid-config",level:4},{value:"<code>request(config, afterResponse)</code>",id:"requestconfig-afterresponse",level:4},{value:"Params",id:"params-9",level:5},{value:"Example",id:"example-9",level:5},{value:"<code>update(id, data, config)</code>",id:"updateid-data-config",level:4}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This page has information on pre-defined resources you can import into your app."}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avuserapi",children:"AvUserApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avregionsapi",children:"AvRegionsApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avpermissionsapi",children:"AvPermissionsApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avuserpermissionsapi",children:"AvUserPermissionsApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avspacesapi",children:"AvSpacesApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avorganizationsapi",children:"AvOrganizationsApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avprovidersapi",children:"AvProvidersApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avlogmessagesapi",children:"AvLogMessagesApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avfilesapi",children:"AvFilesApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avfilesdelivery",children:"AvFilesDeliveryApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avsettingsapi",children:"AvSettingsApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avdisclaimersapi",children:"AvDisclaimersApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avslotmachineapi",children:"AvSlotmachineApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avtelemetryapi",children:"AvTelemetryApi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#avproxyapi",children:"AvProxyApi"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Each pre-defined resource has two exports: the class and an instance. The class follows the pattern ",(0,a.jsx)(n.code,{children:"AvUserApi"})," and the instance is ",(0,a.jsx)(n.code,{children:"avUserApi"}),". In other words, the class is uppercase and the instance is lowercase."]}),"\n",(0,a.jsxs)(n.p,{children:["Use the class to extend functionality. Otherwise import the instance to hit the ground running. Follow ",(0,a.jsx)(n.a,{href:"https://availity.github.io/sdk-js/recipes/http-request",children:"our guide"})," for more information on creating your own endpoint."]}),"\n",(0,a.jsx)(n.h3,{id:"avuserapi",children:"AvUserApi"}),"\n",(0,a.jsx)(n.p,{children:"Get information about the logged in user."}),"\n",(0,a.jsx)(n.h4,{id:"meconfig",children:(0,a.jsx)(n.code,{children:"me(config)"})}),"\n",(0,a.jsx)(n.p,{children:"Helper function that returns information about the logged in user."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avUserApi } from '@availity/api-axios';\n\nconst getUser = async (config) => {\n  const user = await avUserApi.me(config);\n  return user;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avregionsapi",children:"AvRegionsApi"}),"\n",(0,a.jsx)(n.p,{children:"Get the logged in user's currently selected region. Can also get the user's associated regions."}),"\n",(0,a.jsx)(n.h4,{id:"getregionsconfig",children:(0,a.jsx)(n.code,{children:"getRegions(config)"})}),"\n",(0,a.jsx)(n.p,{children:"Get all regions for the logged in user."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avRegionsApi } from '@availity/api-axios';\n\nconst fetchRegions = async (userId) => {\n  // This method will fetch the userId if you do not provide it\n  const response = await avRegionsApi.getRegions({ params: { userId } });\n\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"getcurrentregion",children:(0,a.jsx)(n.code,{children:"getCurrentRegion()"})}),"\n",(0,a.jsx)(n.p,{children:"Returns the user's active region."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avRegionsApi } from '@availity/api-axios';\n\nconst getRegion = async () => {\n  const response = await avRegionsApi.getCurrentRegion();\n\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avpermissionsapi",children:"AvPermissionsApi"}),"\n",(0,a.jsx)(n.p,{children:"Get permissions belonging to the logged in user."}),"\n",(0,a.jsx)(n.h4,{id:"getpermissionspermissionid-region",children:(0,a.jsx)(n.code,{children:"getPermissions(permissionId, region)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avPermissionsApi } from '@availity/api-axios';\n\nconst fetchPermissions = async (id, region) => {\n  const response = await avPermissionsApi.getPermissions(id, region);\n\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avuserpermissionsapi",children:"AvUserPermissionsApi"}),"\n",(0,a.jsx)(n.p,{children:"Get permissions and resources of the logged in user."}),"\n",(0,a.jsx)(n.h4,{id:"getpermissionspermissionid-region-1",children:(0,a.jsx)(n.code,{children:"getPermissions(permissionId, region)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avUserPermissionsApi } from '@availity/api-axios';\n\nconst fetchPermissions = async (id, region) => {\n  const response = await avUserPermissionsApi.getPermissions(id, region);\n\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avspacesapi",children:"AvSpacesApi"}),"\n",(0,a.jsx)(n.p,{children:"Get metadata for the content types for the Spaces platform."}),"\n",(0,a.jsx)(n.h4,{id:"parsespaceidquery",children:(0,a.jsx)(n.code,{children:"parseSpaceId(query)"})}),"\n",(0,a.jsxs)(n.p,{children:["Get the ",(0,a.jsx)(n.code,{children:"spaceId"})," from a query string"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avSpacesApi } from '@availity/api-axios';\n\n// spaceId will be 123\nconst spaceId = avSpacesApi.parseSpaceId('?foo=bar&spaceId=123');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"getspacenamespaceid",children:(0,a.jsx)(n.code,{children:"getSpaceName(spaceId)"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the ",(0,a.jsx)(n.code,{children:"name"})," from the response"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avSpacesApi } from '@availity/api-axios';\n\nconst getName = async () => {\n  // will return response.data.name\n  const name = await avSpacesApi.getSpaceName('123');\n  return name;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avorganizationsapi",children:"AvOrganizationsApi"}),"\n",(0,a.jsx)(n.p,{children:"Service that allows you to get user's organizations."}),"\n",(0,a.jsx)(n.h4,{id:"queryorganizationsuser-config",children:(0,a.jsx)(n.code,{children:"queryOrganizations(user, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns organizations belonging to the ",(0,a.jsx)(n.code,{children:"user"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function queryOrganizations(user, config) {\n  const queryConfig = this.addParams({ userId: user.id }, config);\n  return this.query(queryConfig);\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"getorganizationsconfig",children:(0,a.jsx)(n.code,{children:"getOrganizations(config)"})}),"\n",(0,a.jsx)(n.p,{children:"Returns organizations belonging to the logged in user."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function getOrganizations(config) {\n  if (config && config.params && config.params.userId) {\n    return this.query(config);\n  }\n\n  if (!this.avUsers || !this.avUsers.me) {\n    throw new Error('avUsers must be defined');\n  }\n\n  return this.avUsers\n    .me()\n    .then((user) => this.queryOrganizations(user, config));\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"postgetdata-config-additionalpostgetargs",children:(0,a.jsx)(n.code,{children:"postGet(data, config, additionalPostGetArgs)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"async function postGet(data, config) {\n  if (additionalPostGetArgs) {\n    const { data: organizationsData } = await super.postGet(data, config);\n\n    return this.getFilteredOrganizations(\n      organizationsData,\n      additionalPostGetArgs,\n      data\n    );\n  }\n\n  return super.postGet(data, config);\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"getfilteredorganizationsorganizationsdata-additionalpostgetargs-restqueryparams",children:(0,a.jsx)(n.code,{children:"getFilteredOrganizations(organizationsData, additionalPostGetArgs, restQueryParams)"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns organizations belonging to the logged in user that also have specified ",(0,a.jsx)(n.code,{children:"resources"}),". Meant to be called by ",(0,a.jsx)(n.code,{children:"AvOrganizationSelect"}),", but can be called directly if you already have ",(0,a.jsx)(n.code,{children:"organizations"})," data."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Please note that pagination does not occur for ",(0,a.jsx)(n.code,{children:"organizationsData"})," when ",(0,a.jsx)(n.code,{children:"getFilteredOrganizations"})," is called directly. For pagination, use ",(0,a.jsx)(n.a,{href:"https://availity.github.io/availity-react/storybook/?path=/docs/form-components-select-async-selects--organization-select",children:"AvOrganizationSelect"})," with the ",(0,a.jsx)(n.code,{children:"resourceIds"})," prop or ",(0,a.jsx)(n.code,{children:"postGet(data, config, additionalPostGetArgs)"}),", where ",(0,a.jsx)(n.code,{children:"additionalPostGetArgs"})," is an object containing the ",(0,a.jsx)(n.code,{children:"resourceIds"})," prop."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Structure arguments like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const organizationsData = {\n  organizations, // Array of organization objects\n  limit,\n  offset,\n  totalCount,\n};\n\nconst additionalPostGetArgs = {\n  resourceIds, // string or array of strings\n};\n\nconst data = {\n  permissionId,\n  region,\n};\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"async function getFilteredOrganizations(\n  organizationsData,\n  additionalPostGetArgs,\n  data\n) {\n  const { resourceIds } = additionalPostGetArgs;\n  const { permissionId, region } = data;\n  const {\n    organizations,\n    limit: orgLimit,\n    offset: orgOffset,\n    totalCount: totalOrgCount,\n  } = organizationsData;\n\n  if (typeof permissionId !== 'string' && !Array.isArray(permissionId)) {\n    throw new TypeError(\n      'permissionId must be either an array of ids or a string'\n    );\n  }\n  if (typeof resourceIds !== 'string' && !Array.isArray(resourceIds)) {\n    throw new TypeError(\n      'resourceIds must be either an array of ids or a string'\n    );\n  }\n\n  // resourceIds is passed as readOnly, convert so that we can use Array methods on it\n  const resourceIdsArray =\n    typeof resourceIds === 'string' ? [resourceIds] : resourceIds;\n\n  if (\n    region !== this.previousRegionId ||\n    !this.arePermissionsEqual(permissionId)\n  ) {\n    // avUserPermissions will return a list of user organizations that match given permission and region\n    // This call does not need to be paginated and\n    // we should not need to call it every time we paginate orgs if region and permissions are the same\n    // Limit is set to permissionId.length because that represents maximum results we can get back\n    const {\n      data: { axiUserPermissions: userPermissions },\n    } = await this.avUserPermissions.postGet({\n      permissionId,\n      region,\n      limit: permissionId.length,\n    });\n\n    if (userPermissions) {\n      this.userPermissions = userPermissions;\n      this.previousPermissionIds = permissionId;\n      this.previousRegionId = region;\n    } else {\n      throw new Error('avUserPermissions call failed');\n    }\n  }\n\n  // Reduce the userPermissions result into a collection of orgs that contain a valid resource\n  const authorizedOrgs = this.userPermissions.reduce(\n    (accum, userPermission) => {\n      userPermission.organizations.forEach((userOrg) => {\n        const isDuplicate = accum.some((item) => item.id === userOrg.id);\n        if (!isDuplicate) {\n          // If this org contains one of the passed in resourceIds, it is an authorized org\n          const match = userOrg.resources.some((userResource) => {\n            return resourceIdsArray.some(\n              (resource) => Number(resource) === Number(userResource.id)\n            );\n          });\n          if (match) {\n            accum.push({ id: userOrg.id });\n          }\n        }\n      });\n\n      return accum;\n    },\n    []\n  );\n\n  // avUserPermissions call doesn't return much useful organization data\n  // but we can match valid ids to useful data returned from avOrganizations\n  const authorizedFilteredOrgs = organizations.filter((org) =>\n    authorizedOrgs.some((authorizedOrg) => authorizedOrg.id === org.id)\n  );\n\n  // Transform back into data object that ResourceSelect can use and paginate\n  return {\n    data: {\n      authorizedFilteredOrgs,\n      totalCount: totalOrgCount,\n      limit: orgLimit,\n      offset: orgOffset,\n    },\n  };\n}\n\nfunction arePermissionsEqual(permissionId) {\n  if (typeof permissionId !== typeof this.previousPermissionIds) return false;\n\n  if (typeof permissionId === 'string')\n    return permissionId === this.previousPermissionIds;\n\n  if (\n    Array.isArray(permissionId) &&\n    Array.isArray(this.previousPermissionIds)\n  ) {\n    if (permissionId.length !== this.previousPermissionIds.length) return false;\n\n    // if lengths are equal, need a way to check if values are the same or not\n    // Sets won't allow duplicate values\n    // if size of Set is greater than length of original arrays\n    // then a different value was inserted and they are not equal\n    const idSet = new Set([...permissionId], [...this.previousPermissionIds]);\n    if (idSet.size !== permissionId.length) return false;\n\n    return true;\n  }\n\n  return false;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avprovidersapi",children:"AvProvidersApi"}),"\n",(0,a.jsx)(n.p,{children:"Get providers associated with the logged in user's organization."}),"\n",(0,a.jsx)(n.h4,{id:"getproviderscustomerid-config",children:(0,a.jsx)(n.code,{children:"getProviders(customerId, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["Helper method that gets the providers for the ",(0,a.jsx)(n.code,{children:"customerId"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function getProviders(customerId, config) {\n  const queryConfig = this.addParams({ customerId }, config);\n  return this.query(queryConfig);\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"normalizeproviders",children:(0,a.jsx)(n.code,{children:"normalize(providers)"})}),"\n",(0,a.jsxs)(n.p,{children:["Helper method that adds ",(0,a.jsx)(n.code,{children:"name"})," field to the ",(0,a.jsx)(n.code,{children:"providers"})," collection. The name field is computed from other properies of the provider object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function normalize(providers) {\n  const cloned = providers.slice();\n\n  cloned.forEach((provider) => {\n    provider.name = provider.businessName\n      ? provider.businessName\n      : `${provider.lastName}, ${provider.firstName}`;\n  });\n\n  return cloned;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avlogmessagesapi",children:"AvLogMessagesApi"}),"\n",(0,a.jsx)(n.p,{children:"Create a log message."}),"\n",(0,a.jsx)(n.h4,{id:"sendlevel-entires",children:(0,a.jsx)(n.code,{children:"send(level, entires)"})}),"\n",(0,a.jsx)(n.p,{children:"All methods take a key value object. A key named 'level` determines the log level type in the logs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function send(level, entries) {\n  delete entries.level;\n  const payload = { level, entries };\n  const flattened = flattenObject(payload);\n\n  return Object.keys(flattened).reduce((accum, key) => {\n    accum.append(key, flattened[key]);\n    return accum;\n  }, new FormData());\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"debugentries",children:(0,a.jsx)(n.code,{children:"debug(entries)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function debug(entries) {\n  return this.sendBeacon(this.send('debug', entries));\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"infoentries",children:(0,a.jsx)(n.code,{children:"info(entries)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function info(entries) {\n  return this.sendBeacon(this.send('info', entries));\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"warnentries",children:(0,a.jsx)(n.code,{children:"warn(entries)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function warn(entries) {\n  return this.sendBeacon(this.send('warn', entries));\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"errorentries",children:(0,a.jsx)(n.code,{children:"error(entries)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function error(entries) {\n  return this.sendBeacon(this.send('error', entries));\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avpdfapi",children:"AvPdfApi"}),"\n",(0,a.jsx)(n.h4,{id:"onpdfresponse",children:(0,a.jsx)(n.code,{children:"onPdf(response)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function onPdf(response) {\n  window.location = response.data.links.pdf.href;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function getPdf(data, config) {\n  if (!data.applicationId || !data.fileName || !data.html) {\n    throw new Error('[applicationId], [fileName] and [html] must be defined');\n  }\n\n  return this.post(data, config).then(this.onPdf);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avfilesapi",children:"AvFilesApi"}),"\n",(0,a.jsx)(n.p,{children:"Upload a file to a bucket in the vault"}),"\n",(0,a.jsx)(n.h4,{id:"uploadfiledata-config",children:(0,a.jsx)(n.code,{children:"uploadFile(data, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["Method to upload a file. ",(0,a.jsx)(n.code,{children:"data"})," contains FormData elements with a key of either ",(0,a.jsx)(n.code,{children:"reference"})," (if pointed to an existing file) or ",(0,a.jsx)(n.code,{children:"filedata"})," (if uploading a new file)\n",(0,a.jsx)(n.code,{children:"config"})," should contain ",(0,a.jsx)(n.code,{children:"customerId"}),", ",(0,a.jsx)(n.code,{children:"id"})," (the bucketId), and ",(0,a.jsx)(n.code,{children:"clientId"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function uploadFile(data, config) {\n  if (!config.customerId || !config.clientId) {\n    throw new Error(\n      '[config.customerId] and [config.clientId] must be defined'\n    );\n  }\n  config = this.config(config);\n  config.headers['X-Availity-Customer-ID'] = config.customerId;\n  config.headers['X-Client-ID'] = config.clientId;\n\n  return this.create(data, config);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avfilesdelivery",children:"AvFilesDelivery"}),"\n",(0,a.jsx)(n.p,{children:"Upload a batch of files to a designated channel configured on the server."}),"\n",(0,a.jsx)(n.h4,{id:"uploadfilesdeliverydata-config",children:(0,a.jsx)(n.code,{children:"uploadFilesDelivery(data, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["Method to upload a batch of file deliveries. ",(0,a.jsx)(n.code,{children:"data"})," contains an array of ",(0,a.jsx)(n.code,{children:"deliveries"}),". Provide the ",(0,a.jsx)(n.code,{children:"fileUri"})," (reference field from AvFiles), ",(0,a.jsx)(n.code,{children:"deliveryChannel"}),", and the required ",(0,a.jsx)(n.code,{children:"metadata"})," for that channel."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function uploadFilesDelivery(data, config) {\n  if (!config.customerId || !config.clientId) {\n    throw new Error(\n      '[config.customerId] and [config.clientId] must be defined'\n    );\n  }\n  config = this.config(config);\n  config.headers['X-Availity-Customer-ID'] = config.customerId;\n  config.headers['X-Client-ID'] = config.clientId;\n\n  return this.create(data || {}, config);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Example ",(0,a.jsx)(n.code,{children:"data"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const data = {\n  deliveries: [\n    {\n      fileURI: upload.references[0],\n      deliveryChannel: 'DEMO',\n      metadata: {\n        payerId: 'PAYERID',\n        requestId: '123',\n        patientLastName: 'lastName',\n        patientFirstName: 'firstName',\n      },\n    },\n  ],\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"})," should contain ",(0,a.jsx)(n.code,{children:"customerId"})," and ",(0,a.jsx)(n.code,{children:"clientId"})]}),"\n",(0,a.jsx)(n.h4,{id:"example-response",children:"Example Response"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "id": "123456", // batchId "status": "COMPLETE", // COMPLETE/INPROGRESS\n  "deliveries": [\n    {\n      "id": "56789", // deliveryId "deliveryBatchId": "123456",\n      "fileURI": "<fileUri>",\n      "deliveryChannel": "DEMO",\n      "deliveryStatus": "ERRORED", // INPROGRESS/REJECTED/ERRORED/DELIVERED\n      "errors": [{ "message": "error message", "subject": "subject of error" }],\n      "metadata": {\n        "payerId": "PAYERID",\n        "requestId": "123",\n        "patientLastName": "lastName",\n        "patientFirstName": "firstName"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"getlocationresponse",children:(0,a.jsx)(n.code,{children:"getLocation(response)"})}),"\n",(0,a.jsx)(n.p,{children:"Return the url based on the response"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avFilesDeliveryApi } from '@availity/api-axios';\n\nconst getLocation = (response) => {\n  const url = avFilesDeliveryApi.getLocation(response);\n  return url;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avsettingsapi",children:"AvSettingsApi"}),"\n",(0,a.jsx)(n.p,{children:"Store and retrieve settings for reuse."}),"\n",(0,a.jsx)(n.h4,{id:"getapplicationapplicationdid-config",children:(0,a.jsx)(n.code,{children:"getApplication(applicationdId, config)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avSettingsApi } from '@availity/api-axios';\n\nconst appId = 'test-app';\n\nconst getSettings = async () => {\n  const response = await avSettingsApi.getApplication(appId);\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"setapplicationapplicationid-data-config",children:(0,a.jsx)(n.code,{children:"setApplication(applicationId, data, config)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avSettingsApi } from '@availity/api-axios';\n\nconst appId = 'test-app';\n\nconst updateSettings = async (data) => {\n  const response = await avSettingsApi.setApplication(appId, data);\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avdisclaimersapi",children:"AvDisclaimersApi"}),"\n",(0,a.jsx)(n.p,{children:"Get disclaimers for payer space."}),"\n",(0,a.jsx)(n.h4,{id:"getdisclaimersid-config",children:(0,a.jsx)(n.code,{children:"getDisclaimers(id, config)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avDisclaimersApi } from '@availity/api-axios';\n\nconst fetchDisclaimers = async (id) => {\n  const response = await avDisclaimersApi.getDisclaimers(id);\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avslotmachineapi",children:"AvSlotMachineApi"}),"\n",(0,a.jsx)(n.p,{children:"GraphQL Server containing different queries and mutation."}),"\n",(0,a.jsx)(n.h4,{id:"queryquery-variables",children:(0,a.jsx)(n.code,{children:"query(query, variables)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avSlotMachineApi } from '@availity/api-axios';\n\nconst queryApi = async (query, variables) => {\n  const response = await avSlotMachineApi.query(query, variables);\n  return response.data;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avtelemetryapi",children:"AvTelemetryApi"}),"\n",(0,a.jsx)(n.p,{children:"Endpoint to send telemetry data by level and key/value pairs."}),"\n",(0,a.jsx)(n.h4,{id:"infodata",children:(0,a.jsx)(n.code,{children:"info(data)"})}),"\n",(0,a.jsx)(n.h4,{id:"warndata",children:(0,a.jsx)(n.code,{children:"warn(data)"})}),"\n",(0,a.jsx)(n.h4,{id:"errordata",children:(0,a.jsx)(n.code,{children:"error(data)"})}),"\n",(0,a.jsx)(n.h4,{id:"debugdata",children:(0,a.jsx)(n.code,{children:"debug(data)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { avTelemetryApi } from '@availity/api-axios';\n\nconst sendTelemetryMessages = async (data1, data2, data3, data4) => {\n  const res1 = await avTelemetryApi.info(data1);\n  const res2 = await avTelemetryApi.error(data2);\n  const res3 = await avTelemetryApi.warn(data3);\n  const res4 = await avTelemetryApi.debug(data4);\n  return { res1, res2, res3, res4 };\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avproxyapi",children:"AvProxyApi"}),"\n",(0,a.jsxs)(n.p,{children:["Endpoint for making outbound proxy calls. For a detailed example see ",(0,a.jsx)(n.a,{href:"/sdk-js/recipes/proxy",children:"Creating a Proxy"})]}),"\n",(0,a.jsxs)(n.h4,{id:"x-availity-customer-id-header",children:[(0,a.jsx)(n.code,{children:"X-Availity-Customer-ID"})," Header"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"X-Availity-Customer-ID"})," header is required in the config for all methods. This can be done manually when the method is called as shown in the examples below. Alternatively, if the ",(0,a.jsx)(n.code,{children:"X-Availity-Customer-ID"})," header needs to be added to all (or most) of your api calls, then it can be passed in axios.defaults.headers.common['X-Availity-Customer-ID'] when initializing axios. For more information, see ",(0,a.jsx)(n.a,{href:"https://axios-http.com/docs/config_defaults",children:"Config Defaults"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"customerId"})," is a field in the response from the Organizations API. For more information on the API see the ",(0,a.jsx)(n.a,{href:"#avorganizationsapi",children:"AvOrganizationsApi"})," and the ",(0,a.jsx)(n.a,{href:"/sdk-js/api/definitions/organizations",children:"Organizations API Definition"}),". For UIs, the ",(0,a.jsx)(n.a,{href:"https://availity.github.io/availity-react/form/select/components/organization-select",children:"AvOrganizationSelect component"})," provides a dropdown for the user to select an Organization they are associated with. By default the value returned from the AvOrganizationSelect component is the organization's ",(0,a.jsx)(n.code,{children:"id"}),". Use the ",(0,a.jsx)(n.a,{href:"https://availity.github.io/availity-react/form/select/components/select/#valuekey-string",children:"valueKey"})," prop to get the ",(0,a.jsx)(n.code,{children:"customerId"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"createdata-config",children:(0,a.jsx)(n.code,{children:"create(data, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": Data to be sent in the body of the request"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.create(data, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response.data.climbingHolds || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"deleteid-config",children:(0,a.jsx)(n.code,{children:"delete(id, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-1",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"id"}),": The id of the item to delete"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.delete(id, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"getid-config",children:(0,a.jsx)(n.code,{children:"get(id, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-2",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"id"}),": The id of the item to get"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.get(id, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"patchid-data-config",children:(0,a.jsx)(n.code,{children:"patch(id, data, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-3",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"id"}),": The id of the item to patch"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": Data to be sent in the body of the request"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.patch(id, data, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"postdata-config",children:(0,a.jsx)(n.code,{children:"post(data, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-4",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": Data to be sent in the body of the request"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.post(data, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"postgetid-config",children:(0,a.jsx)(n.code,{children:"postGet(id, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-5",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"id"}),": The id of the item to get"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.postGet(id, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"putid-data-config",children:(0,a.jsx)(n.code,{children:"put(id, data, config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-6",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"id"}),": The id of the item to put"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": Data to be sent in the body of the request"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-6",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.put(id, data, {\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"onresponseconfig-afterresponse",children:(0,a.jsx)(n.code,{children:"onResponse(config, afterResponse)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-7",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"afterResponse"}),": Function to handle response"]}),"\n",(0,a.jsx)(n.h5,{id:"example-7",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.onResponse(\n      {\n        sessionBust: false,\n        headers: { 'X-Availity-Customer-ID': 'customerId' },\n      },\n      afterResponse\n    );\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"queryconfig",children:(0,a.jsx)(n.code,{children:"query(config)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-8",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsx)(n.h5,{id:"example-8",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.config({\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"removeid-config",children:(0,a.jsx)(n.code,{children:"remove(id, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"#deleteid-config",children:"delete(id, config)"})]}),"\n",(0,a.jsx)(n.h4,{id:"requestconfig-afterresponse",children:(0,a.jsx)(n.code,{children:"request(config, afterResponse)"})}),"\n",(0,a.jsx)(n.h5,{id:"params-9",children:"Params"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"config"}),": The request config. For options see ",(0,a.jsx)(n.a,{href:"/sdk-js/api/getting-started#options",children:"Options"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"afterResponse"}),": Function to handle response"]}),"\n",(0,a.jsx)(n.h5,{id:"example-9",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.request(\n      {\n        sessionBust: false,\n        headers: { 'X-Availity-Customer-ID': 'customerId' },\n      },\n      afterResponse\n    );\n    return response || [];\n  } catch {\n    return [];\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h4,{id:"updateid-data-config",children:(0,a.jsx)(n.code,{children:"update(id, data, config)"})}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"#putid-data-config",children:"put(id, data, config)"})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var s=i(6540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
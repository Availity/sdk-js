"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[660],{1427:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"recipes/proxy","title":"Creating a Proxy","description":"The Availity portal does not allow traffic to come from anywhere by default. Our proxy service will map a route on our end to an external route configured by an administrator. Once that has been setup you can begin to use the AvProxyApi to fetch data from the external route.","source":"@site/docs/recipes/proxy.md","sourceDirName":"recipes","slug":"/recipes/proxy","permalink":"/sdk-js/recipes/proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/recipes/proxy.md","tags":[],"version":"current","frontMatter":{"title":"Creating a Proxy"},"sidebar":"someSidebar","previous":{"title":"Uploads","permalink":"/sdk-js/api/uploads"},"next":{"title":"Making an HTTP Request","permalink":"/sdk-js/recipes/http-request"}}');var r=t(4848),i=t(8453);const s={title:"Creating a Proxy"},a=void 0,d={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Example",id:"example",level:2},{value:"Adding API Code Snippet",id:"adding-api-code-snippet",level:3},{value:"Adding a new route for mocks",id:"adding-a-new-route-for-mocks",level:3},{value:"Adding Response Data",id:"adding-response-data",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The Availity portal does not allow traffic to come from anywhere by default. Our proxy service will map a route on our end to an external route configured by an administrator. Once that has been setup you can begin to use the ",(0,r.jsx)(n.code,{children:"AvProxyApi"})," to fetch data from the external route."]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(n.p,{children:["On this page, we will show you how to use ",(0,r.jsx)(n.code,{children:"AvProxyApi"})," class to easily call the desired endpoint. If you need help mocking the data for local development then check out our ",(0,r.jsx)(n.a,{href:"https://availity.github.io/availity-workflow/tutorial/mocks/",children:"guide"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example ",(0,r.jsx)(n.code,{children:"App"})," component where we create a proxy, and then call it. Note the ",(0,r.jsx)(n.code,{children:"X-Availity-Customer-ID"})," header passed in the proxyApi.query config. This header is required for all outbound proxy calls. For more information see ",(0,r.jsx)(n.a,{href:"/sdk-js/api/axios-resources#x-availity-customer-id-header",children:(0,r.jsx)(n.code,{children:"X-Availity-Customer-ID"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"adding-api-code-snippet",children:"Adding API Code Snippet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import React, { useEffect, useState } from 'react';\nimport { AvProxyApi } from '@availity/api-axios';\n\n// This will now let us make calls to /api/v1/proxy/availity/my/proxy\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst fetchData = async (customerId) => {\n  try {\n    const response = await proxyApi.query({\n      sessionBust: false,\n      headers: { 'X-Availity-Customer-ID': 'customerId' },\n    });\n    return response.data.climbingHolds || [];\n  } catch {\n    return [];\n  }\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const response = await fetchData();\n      setClimbingHolds(response);\n      setLoading(false);\n    };\n\n    if (!loading) {\n      fetchData();\n    }\n  }, []);\n\n  return (\n    <div>\n      {data.map((item) => {\n        return <li key={item.key}>{item.name}</li>;\n      })}\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-a-new-route-for-mocks",children:"Adding a new route for mocks"}),"\n",(0,r.jsxs)(n.p,{children:["The above code snippet runs a method called ",(0,r.jsx)(n.code,{children:"fetchData"})," on mount that will fetch the response from ",(0,r.jsx)(n.code,{children:"AvProxyApi"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Since we know the route is going go to ",(0,r.jsx)(n.code,{children:"/api/v1/proxy/availity/my/proxy"})," we need to add our proxy route in the ",(0,r.jsx)(n.code,{children:"routes.json"})," by adding the following to our file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"header=routes.json",children:'{\n  "v1/proxy/availity/my/proxy": {\n    "file": "climbingholds.json"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["All proxy routes will begin with ",(0,r.jsx)(n.code,{children:"v1/proxy/"}),". You will complete the route with the ",(0,r.jsx)(n.code,{children:"tenant"})," and ",(0,r.jsx)(n.code,{children:"name"})," you supplied when creating a new instance of AvProxyApi. In this case ",(0,r.jsx)(n.code,{children:"tenant"})," would be ",(0,r.jsx)(n.code,{children:"availity"})," and the ",(0,r.jsx)(n.code,{children:"name"})," would be ",(0,r.jsx)(n.code,{children:"/my/proxy"})," ."]}),"\n",(0,r.jsx)(n.h3,{id:"adding-response-data",children:"Adding Response Data"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have the route we need to test out our ",(0,r.jsx)(n.code,{children:"climbingholds.json"})," response:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"header=climbingholds.json",children:'{\n  "totalCount": 1,\n  "page": 1,\n  "perPage": 50,\n  "climbingHolds": [\n    {\n      "name": "Jug"\n    },\n    {\n      "name": "Pinch"\n    },\n    {\n      "name": "Crimp"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"While the response we added was not simple, it is more indicative of a real response."}),"\n",(0,r.jsx)(n.p,{children:"If you your application is currently running you will need to restart it as the proxy server will need to be restarted in order to get the updated proxy data."}),"\n",(0,r.jsxs)(n.p,{children:["To determine if your proxy is working correctly, open your browser to ",(0,r.jsx)(n.code,{children:"localhost:3000"})," . Right click in the browser and select 'Inspect'. Navigate to the network tab and you should see your proxy response."]}),"\n",(0,r.jsx)(n.p,{children:"The climbing hold list should be rendered on the screen."}),"\n",(0,r.jsx)("img",{width:"100%",src:"browser-response.png",alt:"Browser Response"}),"\n",(0,r.jsx)(n.p,{children:"You should also see this in your terminal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET /v1/proxy/availity/my/proxy 200 climbingholds.json\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);
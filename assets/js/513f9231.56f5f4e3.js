"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[15],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var a=s(6540);const i={},t=a.createContext(i);function l(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(t.Provider,{value:n},e.children)}},8550:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"resources/messaging","title":"Messaging","description":"A package wrapping the postMessage function with helper functions and security checks.","source":"@site/docs/resources/messaging.md","sourceDirName":"resources","slug":"/resources/messaging","permalink":"/sdk-js/resources/messaging","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/resources/messaging.md","tags":[],"version":"current","frontMatter":{"title":"Messaging"},"sidebar":"someSidebar","previous":{"title":"Environment Vars","permalink":"/sdk-js/resources/env-var"},"next":{"title":"Native Form","permalink":"/sdk-js/resources/native-form"}}');var i=s(4848),t=s(8453);const l={title:"Messaging"},r=void 0,c={},o=[{value:"Installation",id:"installation",level:2},{value:"NPM",id:"npm",level:3},{value:"Yarn",id:"yarn",level:3},{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>subscribe(eventName, callback)</code>",id:"subscribeeventname-callback",level:3},{value:"<code>unsubscribe(eventName)</code>",id:"unsubscribeeventname",level:3},{value:"<code>unsubscribeAll()</code>",id:"unsubscribeall",level:3},{value:"<code>enabled(value)</code>",id:"enabledvalue",level:3},{value:"<code>domain()</code>",id:"domain",level:3},{value:"<code>send(payload, target)</code>",id:"sendpayload-target",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A package wrapping the postMessage function with helper functions and security checks."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@availity/message-core",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/npm/v/@availity/message-core.svg?style=for-the-badge",alt:"Version"})})}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.h3,{id:"npm",children:"NPM"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @availity/message-core\n"})}),"\n",(0,i.jsx)(n.h3,{id:"yarn",children:"Yarn"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @availity/message-core\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import avMessage from '@availity/message-core';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"subscribeeventname-callback",children:(0,i.jsx)(n.code,{children:"subscribe(eventName, callback)"})}),"\n",(0,i.jsx)(n.p,{children:"When a message event is received and verified, the callback function will be called with the event data. It returns a function that can be used to unsubscribe from that event."}),"\n",(0,i.jsx)(n.p,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName: string"})," \u2014 Name of the event you'd like to subscribe to. This is the event name given when using the ",(0,i.jsx)(n.code,{children:"send"})," method of AvMessage. If ",(0,i.jsx)(n.code,{children:"avMessage.send()"})," is call with only a string as the first argument, then that string will be the name of the event that is sent. Otherwise, if called with an object, the event name will be the ",(0,i.jsx)(n.code,{children:"event"})," property of that object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback: (event) => void"})," \u2014"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options?: { ignoreSameWindow?: boolean }"})," \u2014 When ",(0,i.jsx)(n.code,{children:"options"})," is omitted, or when ",(0,i.jsx)(n.code,{children:"options.ignoreSameWindow"})," is omitted or set to ",(0,i.jsx)(n.code,{children:"true"})," (true by default), the callback will not be called for events dispatched from the same ",(0,i.jsx)(n.code,{children:"window"}),". If you wish to response to events emitted from the same ",(0,i.jsx)(n.code,{children:"window"}),", you must pass ",(0,i.jsx)(n.code,{children:"{ ignoreSameWindow: false }"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import avMessage from '@availity/message-core';\n\nconst unsubscribe = avMessage.subscribe(event, callback, {\n  ignoreSameWindow: false,\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unsubscribeeventname",children:(0,i.jsx)(n.code,{children:"unsubscribe(eventName)"})}),"\n",(0,i.jsx)(n.p,{children:"Remove all listeners for given event."}),"\n",(0,i.jsx)(n.h3,{id:"unsubscribeall",children:(0,i.jsx)(n.code,{children:"unsubscribeAll()"})}),"\n",(0,i.jsx)(n.p,{children:"Remove all listeners for all events."}),"\n",(0,i.jsx)(n.h3,{id:"enabledvalue",children:(0,i.jsx)(n.code,{children:"enabled(value)"})}),"\n",(0,i.jsx)(n.p,{children:"If a value is passed in, sets messaging's enabled flag true/false based on value."}),"\n",(0,i.jsx)(n.p,{children:"Returns boolean enabled flag value."}),"\n",(0,i.jsx)(n.h3,{id:"domain",children:(0,i.jsx)(n.code,{children:"domain()"})}),"\n",(0,i.jsx)(n.p,{children:"Returns a string of the current domain."}),"\n",(0,i.jsx)(n.h2,{id:"sendpayload-target",children:(0,i.jsx)(n.code,{children:"send(payload, target)"})}),"\n",(0,i.jsxs)(n.p,{children:["Send the payload to the target if AvMessage is enabled. ",(0,i.jsx)(n.code,{children:"target"})," defaults to the parent window. If you wish to send an event with no data (just a name) you can pass the name as a string to the ",(0,i.jsx)(n.code,{children:"payload"})," parameter, otherwise, pass an object with an ",(0,i.jsx)(n.code,{children:"event"})," property containing the event name."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import avMessage from '@availity/message-core';\n\navMessage.send('my-cool-event');\n\n// or\navMessage.send({ event: 'my-cool-event', isCool: true });\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
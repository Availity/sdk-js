"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[876],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},9291:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"resources/env-var","title":"Environment Vars","description":"Get run-time environment variables for immutable builds","source":"@site/docs/resources/env-var.md","sourceDirName":"resources","slug":"/resources/env-var","permalink":"/sdk-js/resources/env-var","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/resources/env-var.md","tags":[],"version":"current","frontMatter":{"title":"Environment Vars"},"sidebar":"someSidebar","previous":{"title":"Analytics","permalink":"/sdk-js/resources/analytics"},"next":{"title":"Messaging","permalink":"/sdk-js/resources/messaging"}}');var t=i(4848),s=i(8453);const l={title:"Environment Vars"},a=void 0,o={},d=[{value:"Installation",id:"installation",level:2},{value:"NPM",id:"npm",level:3},{value:"Yarn",id:"yarn",level:3},{value:"Usage",id:"usage",level:2},{value:"envVar (default export)",id:"envvar-default-export",level:3},{value:"Required args",id:"required-args",level:4},{value:"Optional args",id:"optional-args",level:4},{value:"Example",id:"example",level:4},{value:"setEnvironments",id:"setenvironments",level:3},{value:"Required args",id:"required-args-1",level:4},{value:"Optional args",id:"optional-args-1",level:4},{value:"Example",id:"example-1",level:4},{value:"getSpecificEnv",id:"getspecificenv",level:3},{value:"Required args",id:"required-args-2",level:4},{value:"Optional args",id:"optional-args-2",level:4},{value:"Example",id:"example-2",level:4},{value:"setSpecificEnvironments",id:"setspecificenvironments",level:3},{value:"Required args",id:"required-args-3",level:4},{value:"Optional args",id:"optional-args-3",level:4},{value:"Example",id:"example-3",level:4}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Get run-time environment variables for immutable builds"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@availity/env-var",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/npm/v/@availity/env-var.svg?style=for-the-badge",alt:"Version"})})}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"npm",children:"NPM"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @availity/env-var\n"})}),"\n",(0,t.jsx)(n.h3,{id:"yarn",children:"Yarn"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add @availity/env-var\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"envvar-default-export",children:"envVar (default export)"}),"\n",(0,t.jsx)(n.p,{children:"This function accepts an object, and will return a value based on what environment you are in. You can also pass in a window override as well as a default value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import envVar from '@availity/env-var';\n\nconst myEnvVal = envVar(values, windowOverride, defaultValue);\n\nexport default myEnvVal;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"required-args",children:"Required args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"values: An object with keys which match the name of the potential environments. The value of the give for the current environment will be returned"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"optional-args",children:"Optional args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["windowOverride: String or Window Object which can be used to override the window which is used to determine the current hostname (which is used to determine the current environment)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When string, the string will be takes an a fully qualified URL and the hostname will be parsed from it."}),"\n",(0,t.jsx)(n.li,{children:"When Window Object, the location hostname will be used."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["defaultValue: The value to be returned when one does not exist for the specified environment. If no default is provided, then the function will use the value specified for ",(0,t.jsx)(n.code,{children:"local"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import envVar from '@availity/env-var';\n\n/*\n    myEnvVal will be different depending on the environment the code runs in\n        prod: myEnvVal will be '123'\n        qa: myEnvVal will be '234'\n        test: myEnvVal will be '345' (defaults to local if env is not found)\n*/\nconst myEnvVal = envVar({ prod: '123', qa: '234', local: '345' });\n\nexport default myEnvVal;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setenvironments",children:"setEnvironments"}),"\n",(0,t.jsx)(n.p,{children:"Set the potential environments and the tests used to determine which environment the code is currently being executed in."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { setEnvironments } from '@availity/env-var';\n\nsetEnvironments(environments, override);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"required-args-1",children:"Required args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"environments: An object with keys which match the name of the potential environments and the values are the tests which are ran to determine if the environment is the current one."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These tests can be"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"String: A string will be used to check an exact match."}),"\n",(0,t.jsx)(n.li,{children:"Regular Expression: A regex will be tested with the domain."}),"\n",(0,t.jsx)(n.li,{children:"Function: The function will be called and the result should be a boolean indicating if the environment is the current environment."}),"\n",(0,t.jsx)(n.li,{children:"Array: An array containing any of the above types."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"optional-args-1",children:"Optional args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"override: Boolean, when true possibleEnvironments will replace the existing environments instead of merging."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { setEnvironments } from '@availity/env-var';\n\nsetEnvironments({\n  local: ['127.0.0.1', 'localhost'],\n  test: [/^t(?:(?:\\d\\d)|(?:est))-apps$/],\n  qa: [/^q(?:(?:\\d\\d)|(?:ap?))-apps$/],\n  prod: [/^apps$/],\n  myEnv: ['custom-stuff-here'],\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getspecificenv",children:"getSpecificEnv"}),"\n",(0,t.jsxs)(n.p,{children:["Get the specific current environment, without rolling up to the general environment. Whereas ",(0,t.jsx)(n.code,{children:"envVar"})," treats the ",(0,t.jsx)(n.code,{children:"t01"})," environment as ",(0,t.jsx)(n.code,{children:"test"}),", for example, ",(0,t.jsx)(n.code,{children:"getSpecificEnv"})," returns ",(0,t.jsx)(n.code,{children:"'t01'"})," for the ",(0,t.jsx)(n.code,{children:"t01"})," environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { getSpecificEnv } from '@availity/env-var';\n\nconst specificEnv = getSpecificEnv(windowOverride);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"required-args-2",children:"Required args"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)(n.h4,{id:"optional-args-2",children:"Optional args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["windowOverride: String or Window Object which can be used to override the window which is used to determine the current hostname (which is used to determine the current environment)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When string, the string will be takes an a fully qualified URL and the hostname will be parsed from it."}),"\n",(0,t.jsx)(n.li,{children:"When Window Object, the location hostname will be used."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { getSpecificEnv } from '@availity/env-var';\n\n/*\ndepending on the environment this code runs in, specificEnv would be something different,\nlike 't01' or 'stg' or 'prod'\n*/\nconst specificEnv = getSpecificEnv();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setspecificenvironments",children:"setSpecificEnvironments"}),"\n",(0,t.jsx)(n.p,{children:"Set the tests that will be used to determine the specific environment the code is currently being executed in."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { setSpecificEnvironments } from '@availity/env-var';\n\nsetSpecificEnvironments(environments, override);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"required-args-3",children:"Required args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["environments: An array of objects with the following keys:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"regex: the regular expression to match against the current subdomain"}),"\n",(0,t.jsx)(n.li,{children:"fn: the function to run to return the name of the environment as a string"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The code will iterate through the objects, matching the subdomain against the ",(0,t.jsx)(n.code,{children:"regex"}),". If the regex matches, the code calls the corresponding ",(0,t.jsx)(n.code,{children:"fn"}),", passing an object containing the match (capturing groups), subdomain, and pathname. The iteration stops when it receives a non-empty answer from a function or when it reaches the end, in which case it returns ",(0,t.jsx)(n.code,{children:"'local'"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"optional-args-3",children:"Optional args"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"override: Boolean, when true possibleEnvironments will replace the existing environments instead of merging."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { setSpecificEnvironments } from '@availity/env-var';\n\nsetSpecificEnvironments([\n  {\n    regex: /^(?:(.*)-)?apps$/,\n    fn: (options) => options.match[1] || 'prod',\n  },\n  {\n    regex: /.*?\\.(?:av|aw|gc)(n|p)$/,\n    fn: (options) => options.subdomain || options.pathname.split('/')[2],\n  },\n]);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);